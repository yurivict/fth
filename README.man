.\" Copyright (c) 2012-2016 Michael Scholz <mi-scholz@users.sourceforge.net>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" @(#)README.man	1.32 3/25/16
.\"
.Dd 2016/03/25
.Dt README
.Os
.\"
.\" NAME
.\"
.Sh NAME
.Nm README
.Nd installation information for the Fth package
.\"
.\" INTRODUCTION
.\"
.Sh INTRODUCTION
.Em Fth
is a software package which includes the interpreter
.Cm fth
and the extension library
.Cm libfth .
You can write Forth scripts and interpret them with the interpreter
.Cm fth
or you can link
.Cm libfth
into an application to use it as extension language.
.Pp
Fth's core language is Ficl, a Forth dialect written by John Sadler.
The Ficl source is included in the Fth source tree and is slightly
changed to fit with Fth.  Ficl is more or less ANS compatible.  The
Fth library contains object type extensions like arrays, hashs,
strings, regexp etc.  A GC tries to handle memory management of
object types.  Fth is known to build with 
.Xr clang 1
as well as with
.Xr gcc 1 .
.\"
.\" WHERE IS FTH LOCATED?
.\"
.Sh WHERE IS FTH LOCATED?
You can get the latest archive from
.Pa http://www.sf.net/projects/fth/ .
If you prefer svn, you can get the source code from
.Pa svn.code.sf.net/p/fth/code/ .
Check out the source tree with
.Dl % svn checkout svn://svn.code.sf.net/p/fth/code/trunk fth
and update it later with
.Dl % svn update
in the new fth directory.
.\"
.\" REQUIREMENTS
.\"
.Sh REQUIREMENTS
.\"
.\" Tecla
.\"
.Ss Tecla
The interactive Fth interpreter supports tcsh-like command-line editing
with the
.Xr tecla 7 
library.  You can find a copy at
.Pa http://www.astro.caltech.edu/~mcs/tecla/libtecla-1.6.3.tar.gz .
If you won't use 
.Xr tecla 7 ,
you can configure Fth without it, see
.Sx "CONFIGURE AND BUILD FTH WITH SCONS" .
.\"
.\" Bn(3)
.\"
.Ss Bn
Bignumbers are supported by 
.Xr bn 3
from openssl.
.\"
.\" 64-Bit-NetBSD and Tecla
.\"
.Ss 64-Bit-NetBSD and Tecla
The libtecla package on
.Nx
provides a static library
.Pa libtecla.a .
On 64-bit machines this package should be compiled with:
.Dl % cd /usr/pkgsrc/devel/libtecla
.Dl % env CFLAGS=-fPIC make install clean
.\"
.\" CONFIGURE AND BUILD FTH WITH SCONS
.\"
.Sh CONFIGURE AND BUILD FTH WITH SCONS
If you have the
.Xr python 1
package
.Xr scons 1 ,
you can configure, build and install Fth with scons:
.Pp
.Dl % scons install
or
.Dl % scons test install
.Pp
You can set additional variables on the command line, see below
for the full set of variables:
.Pp
.Dl % scons CC=clang CFLAGS='-fno-strict-aliasing' install
.Pp
Scons for Fth has the following command line options.  For more,
try
.Dl % scons -h
.Bl -tag -width MMM -compact
.It Fl Fl prefix Ar path
Installation prefix.
.It Fl Fl build Ar path
Build path, default
.Pd ./build .
.It Fl Fl tecla-prefix Ar path
Search for
.Xr tecla 7
in
.Ar path/{include,lib} .
.It Fl Fl program-prefix Ar string
.It Fl Fl program-suffix Ar string 
Prepend or append
.Ar string
to installed program and library name.  More than one version of
fth may be installed at the same time.  You can manipulate the name
to achieve this, for example:
.Pp
.Dl % scons --prefix=/usr/local --program-suffix=-1.3 test install
.Pp
installs the interpreter as fth-1.3, the library as libfth-1.3.so,
creates a library path /usr/local/lib/fth-1.3 for local dynamic
libs and installs the header files in /usr/local/include/fth-1.3:
.Bd -literal -compact
.Dl /usr/local/bin/fth-1.3
.Dl /usr/local/lib/libfth-1.3.so
.Dl /usr/local/lib/fth-1.3/
.Dl /usr/local/include/fth-1.3/
.Ed
.It Fl Fl enable-warnings
Enable extra C compiler warnings flags.
.It Fl Fl disable-shared
Disable shared library support.
.It Fl Fl without-tecla
Do not use the 
.Xr tecla 7
command-line editing library.
.El
.Pp
Scons has the following targets:
.Bl -tag -width MMM -compact
.It Cm dist
Create a distribution tar file.
.It Cm install
Install the Fth package.
.It Cm test
Test the Fth package.
.It Cm uninstall
Uninstall all installed files.
.El
.Dl % scons -c
is similar to
.Sq make clean .
.Pp
Scons handles command line variables.  They can be mixed with
command line options as well:
.Pp
.Dl % scons --prefix=/usr/opt CC=clang warnings=yes install
.Pp
These variables can be also set in
.Pa ${HOME}/.scons/fth.py
as normal Python variables.  Strings have to be enclosed between
single or double quotes corresponding to Python requirements.
.Bd -literal
% cat ~/.scons/fth.py
CC = 'clang'
CFLAGS = '-fstack-protector -fno-strict-aliasing'
.Ed
.Pp
Here is the full list of variables:
.Bl -tag -width MMM -compact
.It Cm CC Ar cc
C Compiler, default
.Cm cc .
.It Cm CFLAGS Ar cflags
Additional CFLAGS, default empty.
.It Cm build Ar path
Build path.
.It Cm prefix Ar path
Install prefix.
.It Cm program_prefix Ar string
.It Cm program_suffix Ar string
Prepend or append
.Ar string
to fth program and library.  See above for an explanation.
.It Cm tecla_prefix Ar path
.Xr tecla 7
prefix.
.It Cm libtecla
Set to yes or no, default yes.
.It Cm shared
Set to yes or no, default yes.
.It Cm warnings
Set to yes or no, default no.
.El
.\"
.\" CONFIGURE AND BUILD FTH THE OLD WAY
.\"
.Sh CONFIGURE AND BUILD FTH THE OLD WAY
The usual way to configure and install Fth is:
.Dl % ./configure
.Dl % make
.Dl % make test # optional
.Dl % make install
.Pp
There are a few additional configure options which may be of
interest.  See
.Sx "CONFIGURE AND BUILD FTH WITH SCONS"
for explanations of them.  For more, try:
.Dl % ./configure -h
.Bl -tag -width MMM -compact
.It Fl Fl prefix Ar path
.It Fl Fl with-tecla-prefix Ar path
.It Fl Fl program-prefix Ar string
.It Fl Fl program-suffix Ar string
.It Fl Fl enable-warnings
.It Fl Fl enable-maintainer-mode
.It Fl Fl disable-shared
.It Fl Fl without-tecla
.El
.Pp
Makefile knows the following targets:
.Bl -diag
.It all
.It clean
.It distclean
.It fth-shared
.It fth-static
.It install
.It install-shared
.It install-static
.It install-strip
.It maintainer-clean
.It test
.It uninstall
.El
.Pp
During testing with make test two environment variables are checked:
.Bl -tag -compact
.It Dv FTH_TEST_IO
.It Dv FTH_TEST_FILE
.El
If set, the IO and File test will be executed.  These two tests may
bear problems so they are disabled by default.
.\"
.\" AUTOCONF MACRO FTH_CHECK_LIB
.\"
.Sh AUTOCONF MACRO FTH_CHECK_LIB
An application using the Fth package as extension language can detect
program and library using the autoconf macro FTH_CHECK_LIB which is
located in fth.m4.  This macro tests if the interpreter fth can be
found in $PATH.  If so, it tests if libfth contains complex and
rational numbers.  Eventually it substitutes six variables for
.Pd configure.ac .
.Pp
After including FTH_CHECK_LIB in configure.ac call aclocal && autoconf
to update aclocal.m4.
.Bl -tag -width MMM -compact
.It FTH
Set to full path of the interpreter or \(dqno\(dq, e.g.
\(dq/usr/local/bin/fth\(dq.
.It FTH_VERSION
Set to version number of the Fth package or \(dqno\(dq, e.g.
\(dq1.3.1\(dq.
.It FTH_CFLAGS
Set to include path or \(dqno\(dq, e.g. \(dq-I/usr/local/include/fth\(dq.
.It FTH_LIBS
Set to library path or \(dqno\(dq, e.g. \(dq-L/usr/local/lib -lfth\(dq.
.It FTH_HAVE_COMPLEX
Set to \(dqyes\(dq or \(dqno\(dq.
.It FTH_HAVE_RATIO
Set to \(dqyes\(dq or \(dqno\(dq.
.El
.\"
.\" Short configure.ac Example
.\"
.Ss Short configure.ac Example
.Bd -literal -compact
AC_ARG_WITH([forth],
            [AS_HELP_STRING([--with-forth],
                            [use Forth as the extension language])],
            [if test \(dq$withval\(dq = yes ; then
                FTH_CHECK_LIB([AC_DEFINE([HAVE_FORTH])])
            fi])
.Ed
.\"
.\" Long configure.ac Example
.\"
.Ss Long configure.ac Example
.Bd -literal -compact
AC_ARG_WITH([forth],
            [AS_HELP_STRING([--with-forth],
                            [use Forth as the extension language])],
            [if test \(dq$withval\(dq = yes ; then
                FTH_CHECK_LIB([AC_DEFINE([HAVE_FORTH])
                               AC_DEFINE([HAVE_EXTENSION_LANGUAGE])
                               if test \(dq$FTH_HAVE_COMPLEX\(dq = yes ; then
                                  AC_DEFINE([HAVE_COMPLEX_TRIG])
                                  AC_DEFINE([HAVE_MAKE_COMPLEX])
                                  AC_DEFINE([HAVE_MAKE_RECTANGULAR])
                               fi
                               if test \(dq$FTH_HAVE_RATIO\(dq = yes ; then
                                  AC_DEFINE([HAVE_MAKE_RATIO])
                               fi
                               AC_SUBST(XEN_CFLAGS, $FTH_CFLAGS)
                               AC_SUBST(XEN_LIBS,   $FTH_LIBS)
                               LOCAL_LANGUAGE=\(dqForth\(dq
                               ac_snd_have_extension_language=yes])
            fi])
.Ed
.\" README.man ends here
