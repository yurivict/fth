README				     LOCAL				README

NAME
     README - installation information for the Fth package

INTRODUCTION
     Fth is a software package which includes the interpreter fth and the
     extension library libfth.	You can write Forth scripts and interpret them
     with the interpreter fth or you can link libfth into an application to
     use it as extension language.

     Fth's core language is Ficl, a Forth dialect written by John Sadler.  The
     Ficl source is included in the Fth source tree and is slightly changed to
     fit with Fth.  Ficl is more or less ANS compatible.  The Fth library
     contains object type extensions like arrays, hashs, strings, regexp etc.
     A GC tries to handle memory management of object types.  Fth is known to
     build with clang(1) as well as with gcc(1).

WHERE IS FTH LOCATED?
     You can get the latest archive from http://www.sf.net/projects/fth/.  If
     you prefer svn, you can get the source code from
     svn.code.sf.net/p/fth/code/.  Check out the source tree with
	   % svn checkout svn://svn.code.sf.net/p/fth/code/trunk fth
     and update it later with
	   % svn update
     in the new fth directory.

REQUIREMENTS
   Tecla
     The interactive Fth interpreter supports tcsh-like command-line editing
     with the tecla(7) library.	 You can find a copy at
     http://www.astro.caltech.edu/~mcs/tecla/libtecla-1.6.3.tar.gz.  If you
     won't use tecla(7), you can configure Fth without it, see CONFIGURE AND
     BUILD FTH WITH SCONS.

   Bn
     Bignumbers are supported by bn(3) from openssl.

   64-Bit-NetBSD and Tecla
     The libtecla package on NetBSD provides a static library libtecla.a.  On
     64-bit machines this package should be compiled with:
	   % cd /usr/pkgsrc/devel/libtecla
	   % env CFLAGS=-fPIC make install clean

CONFIGURE AND BUILD FTH WITH SCONS
     If you have the python(1) package scons(1), you can configure, build and
     install Fth with scons:

	   % scons install
     or
	   % scons test install

     You can set additional variables on the command line, see below for the
     full set of variables:

	   % scons CC=clang CFLAGS='-fno-strict-aliasing' install

     Scons for Fth has the following command line options.  For more, try
	   % scons -h
     --prefix path
	  Installation prefix.
     --build path
	  Build path, default
     --tecla-prefix path
	  Search for tecla(7) in path/{include,lib}.
     --program-prefix string
     --program-suffix string
	  Prepend or append string to installed program and library name.
	  More than one version of fth may be installed at the same time.  You
	  can manipulate the name to achieve this, for example:

		% scons --prefix=/usr/local --program-suffix=-1.3 test install

	  installs the interpreter as fth-1.3, the library as libfth-1.3.so,
	  creates a library path /usr/local/lib/fth-1.3 for local dynamic libs
	  and installs the header files in /usr/local/include/fth-1.3:
		/usr/local/bin/fth-1.3
		/usr/local/lib/libfth-1.3.so
		/usr/local/lib/fth-1.3/
		/usr/local/include/fth-1.3/
     --enable-warnings
	  Enable extra C compiler warnings flags.
     --disable-shared
	  Disable shared library support.
     --without-tecla
	  Do not use the tecla(7) command-line editing library.

     Scons has the following targets:
     dist
	  Create a distribution tar file.
     install
	  Install the Fth package.
     test
	  Test the Fth package.
     uninstall
	  Uninstall all installed files.
	   % scons -c
     is similar to `make clean'.

     Scons handles command line variables.  They can be mixed with command
     line options as well:

	   % scons --prefix=/usr/opt CC=clang warnings=yes install

     These variables can be also set in ${HOME}/.scons/fth.py as normal Python
     variables.	 Strings have to be enclosed between single or double quotes
     corresponding to Python requirements.

     % cat ~/.scons/fth.py
     CC = 'clang'
     CFLAGS = '-fstack-protector -fno-strict-aliasing'

     Here is the full list of variables:
     CC cc
	  C Compiler, default cc.
     CFLAGS cflags
	  Additional CFLAGS, default empty.
     build path
	  Build path.
     prefix path
	  Install prefix.
     program_prefix string
     program_suffix string
	  Prepend or append string to fth program and library.	See above for
	  an explanation.
     tecla_prefix path
	  tecla(7) prefix.
     libtecla
	  Set to yes or no, default yes.
     shared
	  Set to yes or no, default yes.
     warnings
	  Set to yes or no, default no.

CONFIGURE AND BUILD FTH THE OLD WAY
     The usual way to configure and install Fth is:
	   % ./configure
	   % make
	   % make test # optional
	   % make install

     There are a few additional configure options which may be of interest.
     See CONFIGURE AND BUILD FTH WITH SCONS for explanations of them.  For
     more, try:
	   % ./configure -h
     --prefix path
     --with-tecla-prefix path
     --program-prefix string
     --program-suffix string
     --enable-warnings
     --enable-maintainer-mode
     --disable-shared
     --without-tecla

     Makefile knows the following targets:

     all
     clean
     distclean
     fth-shared
     fth-static
     install
     install-shared
     install-static
     install-strip
     maintainer-clean
     test
     uninstall

     During testing with make test two environment variables are checked:
     FTH_TEST_IO
     FTH_TEST_FILE
     If set, the IO and File test will be executed.  These two tests may bear
     problems so they are disabled by default.

AUTOCONF MACRO FTH_CHECK_LIB
     An application using the Fth package as extension language can detect
     program and library using the autoconf macro FTH_CHECK_LIB which is
     located in fth.m4.	 This macro tests if the interpreter fth can be found
     in $PATH.	If so, it tests if libfth contains complex and rational
     numbers.  Eventually it substitutes six variables for

     After including FTH_CHECK_LIB in configure.ac call aclocal && autoconf to
     update aclocal.m4.
     FTH  Set to full path of the interpreter or "no", e.g.
	  "/usr/local/bin/fth".
     FTH_VERSION
	  Set to version number of the Fth package or "no", e.g.  "1.3.1".
     FTH_CFLAGS
	  Set to include path or "no", e.g. "-I/usr/local/include/fth".
     FTH_LIBS
	  Set to library path or "no", e.g. "-L/usr/local/lib -lfth".
     FTH_HAVE_COMPLEX
	  Set to "yes" or "no".
     FTH_HAVE_RATIO
	  Set to "yes" or "no".

   Short configure.ac Example
     AC_ARG_WITH([forth],
		 [AS_HELP_STRING([--with-forth],
				 [use Forth as the extension language])],
		 [if test "$withval" = yes ; then
		     FTH_CHECK_LIB([AC_DEFINE([HAVE_FORTH])])
		 fi])

   Long configure.ac Example
     AC_ARG_WITH([forth],
		 [AS_HELP_STRING([--with-forth],
				 [use Forth as the extension language])],
		 [if test "$withval" = yes ; then
		     FTH_CHECK_LIB([AC_DEFINE([HAVE_FORTH])
				    AC_DEFINE([HAVE_EXTENSION_LANGUAGE])
				    if test "$FTH_HAVE_COMPLEX" = yes ; then
				       AC_DEFINE([HAVE_COMPLEX_TRIG])
				       AC_DEFINE([HAVE_MAKE_COMPLEX])
				       AC_DEFINE([HAVE_MAKE_RECTANGULAR])
				    fi
				    if test "$FTH_HAVE_RATIO" = yes ; then
				       AC_DEFINE([HAVE_MAKE_RATIO])
				    fi
				    AC_SUBST(XEN_CFLAGS, $FTH_CFLAGS)
				    AC_SUBST(XEN_LIBS,	 $FTH_LIBS)
				    LOCAL_LANGUAGE="Forth"
				    ac_snd_have_extension_language=yes])
		 fi])

