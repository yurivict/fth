#! @prefix@/bin/@prog_name@ -Dvs
\ @configure_input@
\ play-sound.fth -- plays and records sound files

\ Copyright (c) 2006-2013 Michael Scholz <mi-scholz@users.sourceforge.net>
\ All rights reserved.
\
\ Redistribution and use in source and binary forms, with or without
\ modification, are permitted provided that the following conditions
\ are met:
\ 1. Redistributions of source code must retain the above copyright
\    notice, this list of conditions and the following disclaimer.
\ 2. Redistributions in binary form must reproduce the above copyright
\    notice, this list of conditions and the following disclaimer in the
\    documentation and/or other materials provided with the distribution.
\
\ THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
\ ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
\ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
\ ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
\ FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
\ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
\ OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
\ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
\ LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
\ OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
\
\ @(#)play-sound.fth.in	1.15 10/4/13

*filename* nil file-basename constant *script-name*
"This is %s v1.15, (c) 2006-2013 Michael Scholz"
    '( *script-name* string-upcase ) string-format constant *banner*
  
SIGINT lambda: { sig -- }
	"\n\nSignal %d received.  Process %d canceled.\n"
	    '( sig getpid ) fth-print
	2 (bye)
; signal drop

require clm

\ Main program starts here.
let: ( -- )
	\ getopt prints error message
	#t to opterr
	"b:c:d:f:i:P:p:qr:s:t:V" { args }
	#f                { play-file }
	#f                { record-file }
	10.0              { duration }
	1                 { channels }
	44100             { srate }
	mus-next          { header-type }
	mus-lfloat        { data-format }
	512               { rt-bufsize }
	mus-audio-default { device }
	#t                { verbose }
	begin
		*argv* args getopt ( ch ) dup
	while
		( ch ) case
			<char> b of
				optarg string->number to rt-bufsize
			endof
			<char> c of
				optarg string->number to channels
			endof
			<char> d of
				optarg string->number to duration
			endof
			<char> f of
				optarg string->number to data-format
			endof
			<char> i of
				optarg string->number to device
			endof
			<char> P of
				*clm-search-list* optarg array-push drop
			endof
			<char> p of
				optarg to play-file
			endof
			<char> q of
				#f to verbose
			endof
			<char> r of
				optarg to record-file
			endof
			<char> s of
				optarg string->number to srate
			endof
			<char> t of
				optarg string->number to header-type
			endof
			<char> V of
				"%s\n" '( *banner* ) fth-print
				0 (bye)
			endof
			<char> ? of
				"\
Usage: play-sound [-q] [-P search-path] file...
       play-sound [-q] [-P search-path] [-p file-to-play]
       play-sound [-q] [-b bufsize] [-c chans] [-d secs] [-f data-format]
		  [-i device] [-s srate] [-t header-type] [-r rec-file]
       play-sound [-V]\n" '() fth-print
				1 (bye)
			endof
		endcase
	repeat ( ch ) drop
	\
	*argc* optind - to *argc*
	optind 0 ?do *argv* array-shift drop loop
	\
	verbose if
		"\\ %s\n" '( *banner* ) fth-print
	then
	play-file if
		play-file find-file file-exists? if
			play-file :verbose verbose play-sound
		else
			"%s doesn't exist in %s"
			    '( play-file *clm-search-list* ) fth-warning
		then
		0 (bye)
	then
	record-file if
		record-file
		    :duration      duration
		    :verbose       verbose
		    :channels      channels
		    :srate         srate
		    :header-type   header-type
		    :data-format   data-format
		    :output-device device
		    :dac-size      rt-bufsize  record-sound
		0 (bye)
	then
	*argc* 0> if
		*argv* each { file }
			file find-file file-exists? if
				file :verbose verbose play-sound
			else
				"%s doesn't exist in %s"
				    '( file *clm-search-list* ) fth-warning
			then
		end-each
		0 (bye)
	then
	verbose if
		"\\ nothing to do\n" '() fth-print
	then
	0 (bye)
;let

\ play-sound.fth ends here
